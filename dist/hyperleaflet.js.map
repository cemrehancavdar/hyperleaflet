{"version":3,"file":"hyperleaflet.js","sources":["../src/Hyperchange/hyperchange.js","../src/utils.js","../src/config.js","../src/Map/events.js","../src/Map/map.js","../src/Geometry/events.js","../src/Geometry/geometry.js","../src/Layers/layers.js","../src/Layers/tileLayers.js","../src/Hyperleaflet/hyperleaflet.js","../src/Hyperleaflet/events.js","../src/Hyperleaflet/hyperleafletGeometryHandler.js","../src/index.js"],"sourcesContent":["/* eslint-disable object-shorthand */\nconst hyperChangeDetection = {\n  events: {},\n  /**\n   * @param {string} targetSelector\n   * @param {string} uniqueAttribute\n   * @param {string[]} attributeFilter\n   */\n  observe: function ({ targetSelector, uniqueAttribute, attributeFilter }) {\n    if (this.events[targetSelector]) {\n      throw new Error(\"Can't observer twice\");\n    }\n    observeChangesInTarget(targetSelector, uniqueAttribute, attributeFilter);\n    this.events[targetSelector] = {};\n  },\n\n  /**\n   * @param {string} targetSelector\n   * @param {'node_adds' | 'node_removes', 'node_changes'} evName\n   * @param {(nodes: Node[] | *)=>void} secondFunction\n   */\n  subscribe: function (targetSelector, evName, secondFunction) {\n    this.events[targetSelector][evName] = this.events[targetSelector][evName] || [];\n    this.events[targetSelector][evName].push(secondFunction);\n  },\n  /**\n   * @param {string} targetSelector\n   * @param {'node_adds' | 'node_removes', 'node_changes'} evName\n   * @param {*} fn\n   * */\n  unsubscribe: function (targetSelector, evName, fn) {\n    if (this.events[targetSelector][evName]) {\n      this.events[targetSelector][evName] = this.events[targetSelector][evName].filter((f) => f !== fn);\n    }\n  },\n\n  /**\n   * @param {string} targetSelector\n   * @param {'node_adds' | 'node_removes', 'node_changes'} evName\n   * @param {*} data\n   */\n  publish: function (targetSelector, evName, data) {\n    if (this.events[targetSelector][evName]) {\n      this.events[targetSelector][evName].forEach((f) => {\n        f(data);\n      });\n    }\n  },\n};\nwindow.pubsub = hyperChangeDetection;\n\n/**\n * @param {string} targetSelector\n * @param {string} uniqueAttribute\n * @param {string[]} attributeFilter\n */\nfunction observeChangesInTarget(targetSelector, uniqueAttribute, attributeFilter) {\n  const observer = new MutationObserver((mutationsList) => {\n    const removedNodes = [];\n    const addedNodes = [];\n    // Iterate through the mutations\n    mutationsList.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        // Child nodes added or removed\n        removedNodes.push(...findNodesWithAttribute(mutation.removedNodes));\n        addedNodes.push(...findNodesWithAttribute(mutation.addedNodes));\n      } else if (mutation.type === 'attributes') {\n        const attribute = mutation.attributeName;\n        const attributeChange = {\n          attribute: attribute,\n          from: mutation.oldValue,\n          to: mutation.target.getAttribute(attribute),\n          [uniqueAttribute]: mutation.target.getAttribute(uniqueAttribute),\n        };\n        const changedNode = [{ dataset: mutation.target.dataset, ...attributeChange }];\n        if (changedNode.length) {\n          hyperChangeDetection.publish(targetSelector, 'node_changes', changedNode);\n        }\n      }\n    });\n\n    const changedNodes = [];\n    const removedNodeMap = new Map(removedNodes.map((node) => [node.getAttribute(uniqueAttribute), node]));\n    const jointNodeSet = new Set();\n    addedNodes.forEach((addNode) => {\n      const addNodeId = addNode.getAttribute(uniqueAttribute);\n      const oldNode = removedNodeMap.get(addNodeId);\n      if (oldNode) {\n        jointNodeSet.add(addNodeId);\n      }\n      if (oldNode && !isEqualNode(oldNode, addNode, attributeFilter)) {\n        const attributeChanges = attributeFilter.reduce((changes, attribute) => {\n          const from = oldNode.getAttribute(attribute);\n          const to = addNode.getAttribute(attribute);\n\n          if (from !== to) {\n            changes.push({ attribute, from, to, [uniqueAttribute]: addNodeId });\n          }\n\n          return changes;\n        }, []);\n        changedNodes.push({ ...attributeChanges, dataset: addNode.dataset });\n      }\n    });\n\n    const reallyRemovedNodes =\n      removedNodes.filter((node) => !jointNodeSet.has(node.getAttribute(uniqueAttribute))) ?? [];\n    const reallyAddedNodes = addedNodes.filter((node) => !jointNodeSet.has(node.getAttribute(uniqueAttribute))) ?? [];\n\n    if (reallyAddedNodes.length) {\n      hyperChangeDetection.publish(targetSelector, 'node_adds', reallyAddedNodes);\n    }\n    if (changedNodes.length) {\n      hyperChangeDetection.publish(targetSelector, 'node_changes', changedNodes);\n    }\n    if (reallyRemovedNodes.length) {\n      hyperChangeDetection.publish(targetSelector, 'node_removes', reallyRemovedNodes);\n    }\n  });\n\n  const isEqualNode = (oldNode, newNode, attributes) =>\n    attributes.every((attribute) => oldNode.getAttribute(attribute) === newNode.getAttribute(attribute));\n\n  function findNodesWithAttribute(nodes) {\n    const result = [];\n    nodes.forEach((node) => {\n      if (node.nodeType === 1) {\n        if (node.hasAttribute(uniqueAttribute)) {\n          result.push(node);\n        }\n        result.push(...findNodesWithAttribute(node?.childNodes));\n      }\n    });\n    return result;\n  }\n\n  // Configuration options for the observer\n  const config = {\n    childList: true,\n    subtree: true,\n    attributes: true,\n    attributeFilter: attributeFilter,\n    attributeOldValue: true,\n  };\n\n  const targetNode = document.querySelector(targetSelector);\n\n  observer.observe(targetNode, config);\n}\n\nexport default hyperChangeDetection;\n","function isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function mergeDeep(target, source) {\n  const output = { ...target };\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) Object.assign(output, { [key]: source[key] });\n        else output[key] = mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(output, { [key]: source[key] });\n      }\n    });\n  }\n  return output;\n}\n","import { mergeDeep } from './utils';\n\nconst defaultOptions = {\n  reverseCoordinateOrder: false,\n  mapElement: '#map',\n  events: {\n    map: {\n      target: 'window',\n      mouse: ['click'],\n      state: ['zoom', 'move'],\n      extra: ['ready'],\n    },\n    geometry: {\n      target: 'window',\n      mouse: ['click'],\n      state: ['add'],\n    },\n    hyperleaflet: {\n      target: 'window',\n      state: ['ready'],\n    },\n  },\n  styles: {},\n};\nexport const Config = {\n  _options: defaultOptions,\n\n  get options() {\n    return this._options;\n  },\n\n  set options(options) {\n    this._options = mergeDeep(this._options, options);\n  },\n\n  reset() {\n    this._options = defaultOptions;\n  },\n\n  getTarget(type) {\n    const { events } = this.options;\n    const { target } = events[type];\n    switch (target) {\n      case 'window':\n        return window;\n      case 'document':\n        return document;\n      case 'map':\n        return this.options.mapElement;\n      case 'hyperleaflet':\n        return document.querySelector('[data-hyperleaflet-source]');\n      default:\n        return document.querySelector(target);\n    }\n  },\n};\n","import { Config } from '../config';\n\nfunction createStateEvent(map, eventName, _leafletEvent) {\n  const bounds = map.getBounds();\n  const min = bounds.getSouthWest();\n  const max = bounds.getNorthEast();\n  const bboxString = bounds.toBBoxString();\n  return new CustomEvent(eventName, {\n    detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: { min, max }, bboxString, _leafletEvent },\n  });\n}\n\nexport function setMapEvents(map) {\n  const eventTarget = Config.getTarget('map');\n  const { mouse, state, extra } = Config.options.events.map;\n\n  state.forEach((eventName) => {\n    map.on(eventName, (e) => {\n      const event = createStateEvent(map, `map:${eventName}`, e);\n      eventTarget.dispatchEvent(event);\n    });\n  });\n\n  mouse.forEach((eventName) => {\n    map.on(eventName, (e) => {\n      const event = new CustomEvent(`map:${eventName}`, { detail: { point: e.latlng }, _leafletEvent: e });\n      eventTarget.dispatchEvent(event);\n    });\n  });\n\n  if (extra.includes('ready')) {\n    map.whenReady(() => {\n      const event = createStateEvent(map, 'map:ready');\n      eventTarget.dispatchEvent(event);\n    });\n  }\n}\n","import * as L from 'leaflet';\nimport { setMapEvents } from './events';\nimport { Config } from '../config';\n\nfunction reverseCoordinates(point) {\n  return point.reverse();\n}\n\nfunction safeParsePoint(pointJson, reverse = false) {\n  try {\n    const point = JSON.parse(pointJson);\n    return reverse ? reverseCoordinates(point) : point;\n  } catch (_) {\n    return [0, 0];\n  }\n}\n\nexport const Map = {\n  map: null,\n  create(mapContainer) {\n    const config = Config;\n    const { center, zoom, minZoom, maxZoom } = mapContainer.dataset;\n    const { reverseCoordinateOrder } = config.options;\n    const mapView = {\n      center: safeParsePoint(center, reverseCoordinateOrder),\n      zoom: zoom || 1,\n    };\n    const leafletMap = L.map(mapContainer, {\n      center: mapView.center,\n      zoom: mapView.zoom,\n      minZoom: minZoom || 0,\n      maxZoom: maxZoom || 18,\n    });\n    setMapEvents(leafletMap);\n    this.map = leafletMap;\n    return leafletMap;\n  },\n};\n","import { Config } from '../config';\n\nconst eventTarget = Config.getTarget('map');\n\nexport function setEvents(leafletObject, id, eventType) {\n  if (Config.options.events.geometry.mouse.includes('click')) {\n    if (eventType === 'mono') {\n      leafletObject.on('click', (e) => {\n        const event = new CustomEvent('geometry:click', {\n          detail: { clickedPoint: e.latlng, geometry: leafletObject.getLatLng(), id },\n        });\n        eventTarget.dispatchEvent(event);\n      });\n    } else if (eventType === 'poly') {\n      leafletObject.on('click', (e) => {\n        const event = new CustomEvent('geometry:click', {\n          detail: {\n            clickedPoint: e.latlng,\n            geometry: leafletObject.getLatLngs(),\n            id,\n          },\n        });\n        eventTarget.dispatchEvent(event);\n      });\n    } else {\n      throw new Error('Invalid event type');\n    }\n  }\n}\n\nexport function sendEvent(eventType, leafletGeometry, id, geometryType, target) {\n  if (Config.options.events.geometry.state.includes('add')) {\n    const event = new CustomEvent(`geometry:${eventType}`, {\n      detail: { id, geometryType, target },\n    });\n    eventTarget.dispatchEvent(event);\n  }\n}\n","import * as L from 'leaflet';\nimport { setEvents } from './events';\nimport { Config } from '../config';\n\nconst convertGeometryCoordinates = (geometry) => {\n  if (typeof geometry === 'string') {\n    try {\n      return JSON.parse(geometry);\n    } catch (error) {\n      console.warn('Failed to parse the geometry string.');\n      return null;\n    }\n  }\n  return null;\n};\n\nconst createHyperleafletGeometryParams = (dataset) => {\n  const hyperleafletOptions = Config.options;\n  const { geometry, geometryType, style, popup, tooltip, id } = dataset;\n  const { styles } = hyperleafletOptions;\n\n  const convertedGeometry = convertGeometryCoordinates(geometry);\n  const computedStyle = styles?.[geometryType]?.[style];\n\n  const options = {\n    style: computedStyle,\n    popup,\n    tooltip,\n    id,\n  };\n\n  return { geometry: convertedGeometry, geometryType, options };\n};\n\nexport const Geometry = {\n  types: {\n    point: {\n      create: (geometry, styleOptions, _extraParams) => L.marker(geometry, styleOptions),\n      update: (leafletObject, geometry) => leafletObject.setLatLng(geometry),\n      convert: (geometry, isLonLat) => (isLonLat ? [...geometry].reverse() : geometry),\n      eventType: 'mono',\n    },\n    linestring: {\n      create: (geometry, styleOptions, _extraParams) => L.polyline(geometry, styleOptions),\n      update: (leafletObject, geometry) => leafletObject.setLatLngs(geometry),\n      convert: (geometry, isLonLat) => (isLonLat ? L.GeoJSON.coordsToLatLngs(geometry, 0) : geometry),\n      eventType: 'poly',\n    },\n    polygon: {\n      create: (geometry, styleOptions, _extraParams) => L.polygon(geometry, styleOptions),\n      update: (leafletObject, geometry) => leafletObject.setLatLngs(geometry),\n      convert: (geometry, isLonLat) => (isLonLat ? L.GeoJSON.coordsToLatLngs(geometry, 1) : geometry),\n      eventType: 'poly',\n    },\n  },\n\n  addType(type, handlers) {\n    if (!handlers.create || !handlers.update || !handlers.convert) {\n      throw new Error('Invalid handlers provided.');\n    }\n\n    this.types[type] = handlers;\n  },\n\n  shouldReverseCoordinates(reverseCoordinateOrder, reverseOrder) {\n    return reverseCoordinateOrder || reverseOrder !== undefined;\n  },\n  applyPopupAndTooltip(leafletGeometry, options) {\n    if (options.popup) {\n      leafletGeometry.bindPopup(options.popup);\n    }\n    if (options.tooltip) {\n      leafletGeometry.bindTooltip(options.tooltip);\n    }\n  },\n\n  createGeometry(dataset) {\n    const { reverseOrder, ...extraOptions } = dataset;\n    const { reverseCoordinateOrder } = Config.options;\n    const { geometry, geometryType, options } = createHyperleafletGeometryParams(dataset, Config.options);\n\n    const geometryCreator = this.types[geometryType.toLowerCase()];\n\n    const isLonLat = this.shouldReverseCoordinates(reverseCoordinateOrder, reverseOrder);\n\n    if (!geometryCreator) {\n      throw new Error(`Invalid geometry type: ${geometryType}`);\n    }\n\n    const convertedGeometry = geometryCreator.convert(geometry, isLonLat);\n\n    const leafletGeometry = geometryCreator.create(convertedGeometry, options.style, extraOptions);\n    this.applyPopupAndTooltip(leafletGeometry, options);\n\n    setEvents(leafletGeometry, options.id, geometryCreator.eventType);\n    return leafletGeometry;\n  },\n\n  updateGeometry(leafletObject, dataset) {\n    const { reverseOrder } = dataset;\n    const { reverseCoordinateOrder } = Config.options;\n\n    const isLonLat = this.shouldReverseCoordinates(reverseCoordinateOrder, reverseOrder);\n    const { geometry, geometryType } = createHyperleafletGeometryParams(dataset);\n    const typeInfo = this.types[geometryType.toLowerCase()];\n\n    if (!typeInfo) {\n      throw new Error(`Invalid geometry type: ${geometryType}`);\n    }\n\n    const convertedGeometry = typeInfo.convert(geometry, isLonLat);\n    return typeInfo.update(leafletObject, convertedGeometry);\n  },\n};\n","import * as L from 'leaflet';\n\nfunction reverseCoordinates(point) {\n  return point.reverse();\n}\n\nexport function safeParsePoint(pointJson, reverse = false) {\n  try {\n    const point = JSON.parse(pointJson);\n    return reverse ? reverseCoordinates(point) : point;\n  } catch (_) {\n    return [0, 0];\n  }\n}\n\nexport const Layers = {\n  control: L.control.layers(),\n  layerGroups: {},\n\n  addBaseLayer(baseLayer, layerName) {\n    this.control.addBaseLayer(baseLayer, layerName);\n  },\n  getLayerGroup(layerName) {\n    return this.layerGroups?.[layerName];\n  },\n  createLayerGroup(layerName) {\n    const layerGroup = L.layerGroup();\n    this.layerGroups[layerName] = layerGroup;\n    this.control.addOverlay(layerGroup, layerName);\n    return layerGroup;\n  },\n  deleteLayerGroup(layerName, options = { ifEmpty: false }) {\n    if (options.ifEmpty && this.layerGroups[layerName].getLayers().length) {\n      return;\n    }\n    const layerGroup = this.layerGroups[layerName];\n    delete this.layerGroups[layerName];\n    this.control.removeLayer(layerGroup);\n  },\n};\n","import * as L from 'leaflet';\n\nexport const TileLayers = {\n  _tileLayers: {\n    OpenStreetMap: L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n    }),\n    EsriWorldImagery: L.tileLayer(\n      'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n      {\n        attribution:\n          'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n      },\n    ),\n  },\n  _addTileLayer(name, { url, minZoom, maxZoom, tms } = {}) {\n    if (this._tileLayers[name]) {\n      return;\n    }\n    const newTileLayer = new L.TileLayer(url, { minZoom: minZoom || 0, maxZoom: maxZoom || 18, tms: !!tms });\n    this._tileLayers[name] = newTileLayer.tile;\n  },\n\n  _getDefaultHyperleafletTile(tileLayerElementList) {\n    const defaultTileLayerElement = tileLayerElementList.find((t) => 'defaultTile' in t.dataset);\n    if (defaultTileLayerElement && defaultTileLayerElement.dataset.tile in this._tileLayers) {\n      return this._tileLayers[defaultTileLayerElement.dataset.tile];\n    }\n    if (tileLayerElementList.length && tileLayerElementList[0].dataset.tile in this._tileLayers) {\n      return this._tileLayers[tileLayerElementList[0].dataset.tile];\n    }\n    return this._tileLayers.OpenStreetMap;\n  },\n\n  tiles: [],\n  defaultTile: undefined,\n  nodesToTiles(tileLayerElementNodeList) {\n    const tileLayerElementList = Array.from(tileLayerElementNodeList);\n    tileLayerElementList.forEach((tileLayerElement) => {\n      const { tile } = tileLayerElement.dataset;\n\n      if (!(tile in this._tileLayers)) {\n        const { tileUrl, tms, minZoom, maxZoom } = tileLayerElement.dataset;\n        this._addTileLayer(tile, { tileUrl, tms, minZoom, maxZoom });\n      }\n      this.tiles.push({ name: tile, tile: this._tileLayers[tile] });\n    });\n\n    this.defaultTile = this._getDefaultHyperleafletTile(tileLayerElementList);\n    return {\n      defaultTile: this.defaultTile,\n      tiles: this.tiles,\n    };\n  },\n};\n","import hyperChangeDetection from '../Hyperchange/hyperchange';\n\nimport { Map } from '../Map/map';\nimport { createGeometryHandler } from './hyperleafletGeometryHandler';\nimport { sendHyperleafletReady } from './events';\nimport { Geometry } from '../Geometry/geometry';\nimport { Layers } from '../Layers/layers';\nimport { TileLayers } from '../Layers';\nimport { Config } from '../config';\n\nconst HYPERLEAFLET_DATA_SOURCE = '[data-hyperleaflet-source]';\n\nexport const Hyperleaflet = {\n  beforeNodeAdd: [],\n  afterNodeAdd: [],\n  beforeNodeRemove: [],\n  afterNodeRemove: [],\n  beforeNodeChange: [],\n  afterNodeChange: [],\n  addNode: [],\n  removeNode: [],\n  changeNode: [],\n\n  initialize(mapContainer) {\n    this.map = Map.create(mapContainer);\n    this.initializeLayerControl(mapContainer, this.map);\n    this.initializeHyperleafletDataSource();\n    sendHyperleafletReady(this.map);\n  },\n\n  addExtension(extension) {\n    if (extension.layer) {\n      Layers.control.addOverlay(extension.layer);\n    }\n\n    if (extension.addNode && typeof extension.addNode === 'function') {\n      this.addNode.push((node) => extension.addNode(node));\n    }\n\n    if (extension.removeNode && typeof extension.removeNode === 'function') {\n      this.removeNode.push((node) => extension.removeNode(node));\n    }\n\n    if (extension.changeNode && typeof extension.changeNode === 'function') {\n      this.changeNode.push((node) => extension.changeNode(node));\n    }\n\n    // If the extension has a custom onNodeAdded hook, add it to the list\n    if (extension.beforeNodeAdd && typeof extension.beforeNodeAdd === 'function') {\n      this.beforeNodeAdd.push((node) => extension.beforeNodeAdd(node));\n    }\n\n    if (extension.afterNodeAdd && typeof extension.afterNodeAdd === 'function') {\n      this.afterNodeAdd.push(extension.afterNodeAdd);\n    }\n\n    if (extension.beforeNodeRemove && typeof extension.beforeNodeRemove === 'function') {\n      this.beforeNodeRemove.push(extension.beforeNodeRemove);\n    }\n\n    if (extension.afterNodeRemove && typeof extension.afterNodeRemove === 'function') {\n      this.afterNodeRemove.push(extension.afterNodeRemove);\n    }\n\n    if (extension.beforeNodeChange && typeof extension.beforeNodeChange === 'function') {\n      this.beforeNodeChange.push(extension.beforeNodeChange);\n    }\n\n    if (extension.afterNodeChange && typeof extension.afterNodeChange === 'function') {\n      this.afterNodeChange.push(extension.afterNodeChange);\n    }\n  },\n\n  initializeHyperleafletDataSource() {\n    const hyperleafletDataSource = document.querySelector(HYPERLEAFLET_DATA_SOURCE);\n\n    if (!hyperleafletDataSource) return;\n\n    const { addNodeToHyperleaflet, deleteNodeFromHyperleaflet, changeNodeInHyperleaflet } = createGeometryHandler(\n      this.map,\n      Layers,\n    );\n\n    this.map.whenReady(() => {\n      const nodes = hyperleafletDataSource.querySelectorAll('[data-id]');\n      nodes.forEach((node) => {\n        this.beforeNodeAdd.forEach((hook) => hook(node));\n        if (node.dataset.hyperleafletExtension) {\n          this.addNode.forEach((hook) => hook(node));\n        } else {\n          addNodeToHyperleaflet(node);\n        }\n        this.afterNodeAdd.forEach((hook) => hook(node));\n      });\n    });\n\n    hyperChangeDetection.observe({\n      targetSelector: HYPERLEAFLET_DATA_SOURCE,\n      uniqueAttribute: 'data-id',\n      attributeFilter: ['data-geometry'],\n    });\n\n    hyperChangeDetection.subscribe(HYPERLEAFLET_DATA_SOURCE, 'node_adds', (nodes) => {\n      nodes.forEach((node) => {\n        this.beforeNodeAdd.forEach((hook) => hook(node));\n        if (node.dataset.hyperleafletExtension) {\n          this.addNode.forEach((hook) => hook(node));\n        } else {\n          addNodeToHyperleaflet(node);\n        }\n        this.afterNodeAdd.forEach((hook) => hook(node));\n      });\n    });\n\n    hyperChangeDetection.subscribe(HYPERLEAFLET_DATA_SOURCE, 'node_removes', (nodes) => {\n      nodes.forEach((node) => {\n        this.beforeNodeRemove.forEach((hook) => hook(node));\n        if (node.dataset.hyperleafletExtension) {\n          this.removeNode.forEach((hook) => hook(node));\n        } else {\n          deleteNodeFromHyperleaflet(node);\n        }\n        this.beforeNodeRemove.forEach((hook) => hook(node));\n      });\n    });\n\n    hyperChangeDetection.subscribe(HYPERLEAFLET_DATA_SOURCE, 'node_changes', (changes) => {\n      changes.forEach((change) => {\n        this.afterNodeChange.forEach((hook) => hook(change));\n        if (change.dataset.hyperleafletExtension) {\n          this.changeNode.forEach((hook) => hook(change));\n        } else {\n          changeNodeInHyperleaflet(change);\n        }\n        this.afterNodeChange.forEach((hook) => hook(change));\n      });\n    });\n  },\n\n  initializeLayerControl(mapContainer) {\n    const tileLayerElementList = mapContainer.querySelectorAll('[data-tile]');\n    const { defaultTile, tiles } = TileLayers.nodesToTiles(tileLayerElementList);\n\n    const layerControl = Layers.control;\n    layerControl.addTo(this.map);\n\n    tiles.forEach(({ name, tile }) => {\n      Layers.addBaseLayer(tile, name);\n    });\n\n    defaultTile.addTo(this.map);\n  },\n};\n\nHyperleaflet.addGeometryType = (type, customGeometryType) => {\n  Geometry.addType(type, customGeometryType);\n};\n\nHyperleaflet.options = Config.options;\n","import { Config } from '../config';\n\nexport function sendHyperleafletReady(map) {\n  if (Config.options.events.hyperleaflet.state.includes('ready')) {\n    const bounds = map.getBounds();\n    const min = bounds.getSouthWest();\n    const max = bounds.getNorthEast();\n    const bboxString = bounds.toBBoxString();\n    const event = new CustomEvent('hyperleaflet:ready', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: { min, max }, bboxString },\n    });\n    window.dispatchEvent(event);\n  }\n}\n","import { sendEvent } from '../Geometry/events';\nimport { Geometry } from '../Geometry/geometry';\n\nexport function createGeometryHandler(map, layerModule) {\n  function addNodeToHyperleaflet(node) {\n    const {\n      dataset,\n      dataset: { layerName, id },\n    } = node;\n\n    let target = map;\n    if (layerName) {\n      const layer = layerModule.getLayerGroup(layerName);\n      if (!layer) {\n        target = layerModule.createLayerGroup(layerName);\n        target.addTo(map);\n      } else {\n        target = layer;\n      }\n    }\n\n    const leafletGeometry = Geometry.createGeometry(dataset);\n    sendEvent('add', leafletGeometry, id, dataset.geometryType, target);\n    leafletGeometry.hlID = id;\n    leafletGeometry.addTo(target);\n  }\n\n  function deleteNodeFromHyperleaflet(node) {\n    const rowId = node.dataset.id;\n    const { layerName } = node.dataset;\n\n    const layer = layerModule.getLayerGroup(layerName);\n\n    const target = layer || map;\n\n    const leafletLayers = Object.values(target._layers);\n    const leafletObject = leafletLayers.find((_layer) => _layer.hlID === rowId);\n\n    target.removeLayer(leafletObject);\n    sendEvent('remove', leafletObject, rowId, node.dataset.geometryType, target);\n    layerModule.deleteLayerGroup(layerName, { ifEmpty: true });\n  }\n\n  function changeNodeInHyperleaflet(change) {\n    const rowId = change['data-id'];\n\n    const leafletLayers = Object.values(map._layers);\n    const leafletObject = leafletLayers.find((layer) => layer.hlID === rowId);\n\n    switch (change.attribute) {\n      case 'data-geometry': {\n        sendEvent('change', leafletObject, rowId, change.dataset.geometryType, map);\n        return Geometry.updateGeometry(leafletObject, change.dataset);\n      }\n      default: {\n        throw new Error('Parameter is not a number!');\n      }\n    }\n  }\n\n  return { addNodeToHyperleaflet, deleteNodeFromHyperleaflet, changeNodeInHyperleaflet };\n}\n","import { Hyperleaflet } from './Hyperleaflet';\nimport { Config } from './config';\n\n(function () {\n  document.addEventListener('DOMContentLoaded', () => {\n    Hyperleaflet.initialize(document.querySelector(Config.options.mapElement));\n  });\n})();\n\nwindow.hyperleaflet = Hyperleaflet;\nconst hyperleaflet = Hyperleaflet;\nexport { hyperleaflet };\n"],"names":["hyperChangeDetection","events","observe","_ref","targetSelector","uniqueAttribute","attributeFilter","this","Error","observer","MutationObserver","mutationsList","_removedNodes$filter","_addedNodes$filter","removedNodes","addedNodes","forEach","mutation","type","push","apply","findNodesWithAttribute","_attributeChange","attribute","attributeName","attributeChange","from","oldValue","to","target","getAttribute","changedNode","_extends","dataset","length","publish","changedNodes","removedNodeMap","Map","map","node","jointNodeSet","Set","addNode","addNodeId","oldNode","get","add","isEqualNode","attributeChanges","reduce","changes","_changes$push","reallyRemovedNodes","filter","has","reallyAddedNodes","newNode","attributes","every","nodes","result","nodeType","hasAttribute","childNodes","config","childList","subtree","attributeOldValue","targetNode","document","querySelector","observeChangesInTarget","subscribe","evName","secondFunction","unsubscribe","fn","f","data","isObject","item","Array","isArray","mergeDeep","source","output","Object","keys","key","_Object$assign","_Object$assign2","assign","window","pubsub","defaultOptions","reverseCoordinateOrder","mapElement","mouse","state","extra","geometry","hyperleaflet","styles","Config","_options","options","reset","getTarget","createStateEvent","eventName","_leafletEvent","bounds","getBounds","min","getSouthWest","max","getNorthEast","bboxString","toBBoxString","CustomEvent","detail","zoom","getZoom","center","getCenter","bbox","safeParsePoint","pointJson","reverse","point","JSON","parse","reverseCoordinates","_","create","mapContainer","_mapContainer$dataset","minZoom","maxZoom","mapView","leafletMap","L","eventTarget","_Config$options$event","on","e","event","dispatchEvent","latlng","includes","whenReady","setMapEvents","sendEvent","eventType","leafletGeometry","id","geometryType","createHyperleafletGeometryParams","_styles$geometryType","style","popup","tooltip","error","console","warn","convertGeometryCoordinates","Geometry","types","styleOptions","_extraParams","marker","update","leafletObject","setLatLng","convert","isLonLat","concat","linestring","polyline","setLatLngs","GeoJSON","coordsToLatLngs","polygon","addType","handlers","shouldReverseCoordinates","reverseOrder","undefined","applyPopupAndTooltip","bindPopup","bindTooltip","createGeometry","extraOptions","_objectWithoutPropertiesLoose","_excluded","_createHyperleafletGe","geometryCreator","toLowerCase","convertedGeometry","clickedPoint","getLatLng","getLatLngs","setEvents","updateGeometry","_createHyperleafletGe2","typeInfo","Layers","control","layers","layerGroups","addBaseLayer","baseLayer","layerName","getLayerGroup","_this$layerGroups","createLayerGroup","layerGroup","addOverlay","deleteLayerGroup","ifEmpty","getLayers","removeLayer","TileLayers","_tileLayers","OpenStreetMap","tileLayer","attribution","EsriWorldImagery","_addTileLayer","name","_temp","newTileLayer","TileLayer","url","tms","tile","_getDefaultHyperleafletTile","tileLayerElementList","defaultTileLayerElement","find","t","tiles","defaultTile","nodesToTiles","tileLayerElementNodeList","_this","tileLayerElement","_tileLayerElement$dat","tileUrl","HYPERLEAFLET_DATA_SOURCE","Hyperleaflet","beforeNodeAdd","afterNodeAdd","beforeNodeRemove","afterNodeRemove","beforeNodeChange","afterNodeChange","removeNode","changeNode","initialize","initializeLayerControl","initializeHyperleafletDataSource","sendHyperleafletReady","addExtension","extension","layer","hyperleafletDataSource","layerModule","_createGeometryHandle","addNodeToHyperleaflet","_node$dataset","addTo","hlID","deleteNodeFromHyperleaflet","rowId","values","_layers","_layer","changeNodeInHyperleaflet","change","querySelectorAll","hook","hyperleafletExtension","_TileLayers$nodesToTi","customGeometryType","addEventListener"],"mappings":"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"}