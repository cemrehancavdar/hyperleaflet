{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-hyperleaflet","title":"What is hyperleaflet?","text":"<p>Hyperleaflet is a library that allows you to use the popular Leaflet library with just HTML attributes. With Hyperleaflet, you can interact with Leaflet maps without writing a single line of JavaScript. It offers a wide range of capabilities by wrapping Leaflet's most useful features in an opinionated yet versatile way.</p> <p>Hyperleaflet designed to be a user-friendly Leaflet library that simplifies the creation of interactive maps for web pages or server-rendered HTML pages. This makes it a great choice for developers who want to create custom maps for web applications that require server-side rendering.</p>"},{"location":"#what-is-leaflet","title":"What is Leaflet?","text":"<p>Leaflet is a popular JavaScript library by Vladimir Agafonkin used for creating interactive maps on web pages. Leaflet already has a powerful and intuitive API that makes it easy to work with and customize maps to your specific needs. </p>"},{"location":"#try-it-yourself","title":"Try it yourself","text":""},{"location":"samples/","title":"Samples","text":""},{"location":"samples/#samples","title":"Samples","text":""},{"location":"samples/#basic-sample","title":"Basic Sample","text":""},{"location":"samples/#fetching-points-in-viewbox-sample","title":"Fetching Points In Viewbox Sample","text":""},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#installing","title":"Installing","text":"<p>Hyperleaflet is browser-oriented library. To install simply add the following <code>&lt;script&gt;</code> tag to your HTML document:</p> <pre><code>&lt;script\n  src=\"https://www.unpkg.com/hyperleaflet\"\n  integrity=\"sha384-hJcYnhFwc9+OUe4q7GsQz3cYn5tXKOzO6pl/wjSc2FKofcAfN/nsQg5Il+jCiFN+\"\n  crossorigin=\"anonymous\"\n&gt;&lt;/script&gt;\n</code></pre>"},{"location":"usage/#adding-hyperleaflet-to-project","title":"Adding Hyperleaflet to Project","text":"<p>Hyperleaflet is built on top of Leaflet, so you must include Leaflet in your project first. Refer to the Leaflet Quick Start guide here to learn how to add Leaflet to your project.</p> <p>Once you have Leaflet included, add the Hyperleaflet script tag to your HTML document. Make sure to include the defer attribute in the script tag to ensure it runs after the document has finished parsing.</p> Don't forget to style your map <p>Make sure to add a minimum height to the container element that defines your Leaflet map, otherwise it may not appear in your document.</p> <pre><code>#map { \n  height: 500px;\n  width: 500px;\n   }\n</code></pre>"},{"location":"usage/#creating-hyperleaflet-map","title":"Creating Hyperleaflet Map","text":"<p>All you need to do is add a div element with the id \"map\" to your HTML document, and a Leaflet map will be rendered automatically.</p> <pre><code>&lt;div id=\"map\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"usage/#handle-with-data-attributes","title":"Handle with Data Attributes","text":"<p>Hyperleaflet leverages Leaflet's functionality by reading predefined data-* attributes, such as <code>data-center</code> and <code>data-geometry</code>, to handle map rendering and other features.</p>"},{"location":"usage/#map-attributes","title":"Map Attributes","text":"<p>Map attributes define the characteristics of a map, including the tile layer, zoom level, center point, and default tile. </p> <pre><code>&lt;div\n  id=\"map\"\n  data-center=\"[38.5, 37.0]\"\n  data-zoom=\"5\"\n  data-min-zoom=\"4\"\n  data-max-zoom=\"11\"\n&gt;\n  ...\n&lt;/div&gt;\n</code></pre> <code>data-center</code> <p>The center point of the map. Valid values: [latitude, longitude]. </p> <code>data-zoom</code> The zoom level of the map. Valid values: integer 1-18.  <code>data-min-zoom</code> The minimum zoom level of the map.  Valid values: integer 1-18. <code>data-max-zoom</code> The maximum zoom level of the map.  Valid values: integer 1-18. <code>data-reverse-order-all</code> If present, all geometries added will be expected longitude, latitude (as geojson)   Hyperleaflet by default takes all geometries as latitude, longitude (as leaflet).  Further reading on coordinate orders."},{"location":"usage/#tile-layers-attributes","title":"Tile Layers Attributes","text":"<pre><code>&lt;div id=\"map\" ...&gt;\n  &lt;div\n    data-tile=\"EsriWorldImagery\"\n    data-max-zoom=\"19\"\n    data-min-zoom=\"5\"\n    data-default-tile\n  &gt;&lt;/div&gt;\n  &lt;div data-tile=\"OpenStreetMap\"&gt;&lt;/div&gt;\n  &lt;div\n    data-tile=\"OpenTopoMap\"\n    data-tile-url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n  &gt;&lt;/div&gt;\n  &lt;div\n    data-tile=\"ExampleTmsTile\"\n    data-tile-url=\"http://example.com/{z}/{x}/{y}.png\"\n    data-tms=\"true\"\n  &gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <code>data-tile</code> The tile layer to be displayed on the map. Valid values: string, one of: \"OpenStreetMap\", \"EsriWorldImagery\", or the custom tile layer name. If a custom tile layer is used, it can be defined using data-tile-url. <code>data-tile-url</code> The URL template for the custom tile layer. The placeholders {s}, {z}, {x}, and {y} will be replaced with the appropriate values for each tile. Valid format: string, URL template. <code>data-min-zoom</code> The minimum zoom level of the tile layer.  Valid values: integer 1-18. <code>data-max-zoom</code> The maximum zoom level of the tile layer.  Valid values: integer 1-18. <code>data-default-tile</code> If present, tile layer will be set as the default tile.  <code>data-tms</code> Indicates that the tile layer is a TMS (Tiled Map Service) layer. This is only necessary if using a custom tile layer that is in TMS format. Valid values: true/false. Default: false Primary Tile <p>When no tile layer is specified, the primary tile layer for a map is Open Street Map (OSM) by default. However, if one or more layers are specified, the first one listed will be the primary tile layer unless data-default-tile is specified for a different layer. In that case, the layer specified with data-default-tile will be set as the default tile layer.</p>"},{"location":"usage/#geometry-attributes","title":"Geometry Attributes","text":"<p>The \"data-hyperleaflet-source\" attribute is used to specify the data source for the map, including the type of geometry and the coordinates for each feature.</p> <pre><code>&lt;div data-hyperleaflet-source&gt;\n  &lt;span\n    data-id=\"1\"\n    data-geometry-type=\"Point\"\n    data-geometry=\"[38.5, 37.0]\"\n  &gt;&lt;/span&gt;\n  &lt;span\n    data-id=\"2\"\n    data-geometry-type=\"LineString\"\n    data-geometry=\"[[32.7782,38.5250],[39.9032,39.6290],[41.2462,38.9089]]\"\n  &gt;&lt;/span&gt;\n  &lt;span\n    data-id=\"3\"\n    data-geometry-type=\"Polygon\"\n    data-geometry=\"[[[35.6105693392152,40.23301476976525],[35.6105693392152,38.233456796364635],[40.0710185579654,38.233456796364635],[40.0710185579654,40.23301476976525],[35.6105693392152,40.23301476976525]]]\"\n  &gt;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre> <code>data-hyperleaflet-source</code> Identifies the container element that holds the geometry data. <code>data-id</code> Identifies each feature by its unique ID. Valid format: string or number. <code>data-geometry-type</code> Identifies the type of geometry for each feature.  Valid values: string: [ Point, LineString, Polygon ]. <code>data-geometry</code> Specifies the geometry data for each feature.  Valid format: array of coordinates for Point and LineString, array of arrays of coordinates for Polygon. <code>data-popup</code> Specifies the popup content for each feature. Use in combination with other <code>data-*</code> attributes.  <pre><code>&lt;span ... data-popup=\"&lt;span class='city-popup'&gt;Ankara&lt;/span&gt;\"&gt;&lt;/span&gt;\n</code></pre>   Valid format: Text or HTML for Feature. <code>data-tooltip</code> Specifies the tooltip content for each feature. Can be combined with other <code>data-*</code> attributes.  <pre><code>&lt;span ... data-tooltip=\"Road to Ankara\"&gt;&lt;/span&gt;\n</code></pre>   Valid format: Text or HTML for Feature. <code>data-geometry-display</code> <p>The data-geometry-display attribute is used to control the display of geometries in a HTML element. It can take one of two valid options:  <code>json</code>: Removes the data-geometry attributes from the containing elements and creates a new script tag with application/json type that contains the geometries in a GeoJSON-like syntax.    <pre><code> &lt;div data-hyperleaflet-source data-geometry-display=\"json\"&gt;\n   &lt;!-- Elements with data-geometry attributes here --&gt;\n &lt;/div&gt;\n</code></pre>    A new <code>&lt;script type=\"application/json\" data-testid=\"json\"&gt;</code> element will be genereated with removed geometry attributes and corresponding data-id's and atteached to end of document.    <pre><code> &lt;script type=\"application/json\" data-testid=\"json\"&gt;{\n \"1\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n     38.5,\n     37\n   ]\n   },\n   ...\n }\n &lt;/script&gt;\n</code></pre> <code>remove</code>: Removes the data-geometry attributes from the containing elements.    <pre><code> &lt;div data-hyperleaflet-source data-geometry-display=\"remove\"&gt;\n   &lt;!-- Elements with data-geometry attributes here --&gt;\n &lt;/div&gt;\n</code></pre></p> Why do data-geometry-display exists <p>When using only points, data-geometry can be a simple and convenient way to include geometry information in HTML. However, as more complex geometries are added, the HTML can quickly become cluttered with lengthy geometry representations.</p> <p>The data-geometry-display attribute addresses this by providing two options. The remove option removes the geometry attributes from the HTML entirely, which can make it cleaner and easier to read in browser dev tools. However, it also removes the ability to check the coordinates of the geometry directly in the HTML.</p> <p>The json option extracts the geometries to a newly created script tag with a type of application/json, which allows you to inspect the geometries as a JSON object. This can be useful if you need to verify or debug the geometry data.</p> <p>TL;DR: Long geometries got you down? Use data-geometry-display to clean up your HTML and make it more manageable.  remove: remove data-geometry attributes  json: remove them and add to end of the document </p>"},{"location":"usage/#event-handling","title":"Event Handling","text":"<p>Hyperleaflet provides an event system for interacting with the map and geometries. It sends custom events to the window object, which can be listened to and handled by JavaScript. We recommend using either _hyperscript or alpine.js etc. to handle the events. The custom events contain a detail object with useful attributes, such as the clicked point on the map.</p> <p>Events use the <code>target:event</code> syntax, separated by a colon.</p>"},{"location":"usage/#hyperleaflet-events","title":"Hyperleaflet Events","text":"<code>hyperleaflet:ready</code> Triggered when hyperleaflet successfuly initialized    Event detail attributes  zoom:  the current zoom level, in the form: number  center: the geographic coordinates of the center of the map, in the form { lat: number, lng: number }  bbox: the bounding box of the map, in the form { min: { lat: number, lng: number }, max: { lat: number, lng: number } }  bboxString: the string representation of the bounding box in the format \"minLng,minLat,maxLng,maxLat\" Example<pre><code>  window.addEventListener('map:move', (e) =&gt; {\n    const { zoom, center, bbox, bboxString } = e.detail;\n    console.log(`Map zoom at level ${zoom}`);\n    console.log(`Centered at (${center.lat}, ${center.lng})`);\n    console.log(`Bounded by (${bbox.min.lat}, ${bbox.min.lng}) and (${bbox.max.lat}, ${bbox.max.lng})`);\n    console.log(`Bounding box string: ${bboxString}`);\n  });\n</code></pre>"},{"location":"usage/#map-events","title":"Map Events","text":"<code>map:click</code> <p>Triggered when the user clicks on the map.    Event detail attributes  point: the geographic coordinates of the clicked point, in the form: { lat: number, lng: number } </p> Example<pre><code>  window.addEventListener('map:click', (event) =&gt; {\n    const { point } = event.detail;\n    console.log(`Map clicked at: (${point.lat}, ${point.lng})`);\n  });\n</code></pre> <code>map:zoom</code> <p>Triggered when the map's zoom level changes.    Event detail attributes  zoom: the new zoom level, in the form: number center: the geographic coordinates of the center of the map, in the form: { lat: number, lng: number }  bbox: the bounding box of the map, in the form: { min: { lat: number, lng: number }, max: { lat: number, lng: number } }  bboxString: the string representation of the bounding box in the format \"minLng,minLat,maxLng,maxLat\"</p> Example<pre><code>  window.addEventListener('map:zoom', (e) =&gt; {\n    const { zoom, center, bbox, bboxString } = e.detail;\n    console.log(`Map zoomed to level ${zoom}`);\n    console.log(`Centered at (${center.lat}, ${center.lng})`);\n    console.log(`Bounded by (${bbox.min.lat}, ${bbox.min.lng}) and (${bbox.max.lat}, ${bbox.max.lng})`);\n    console.log(`Bounding box string: ${bboxString}`);\n  });\n</code></pre> <code>map:move</code> <p>Triggered when the user moves the map.    Event detail attributes  zoom:  the current zoom level, in the form: number  center: the geographic coordinates of the center of the map, in the form { lat: number, lng: number }  bbox: the bounding box of the map, in the form { min: { lat: number, lng: number }, max: { lat: number, lng: number } }  bboxString: the string representation of the bounding box in the format \"minLng,minLat,maxLng,maxLat\"</p> Example<pre><code>  window.addEventListener('map:move', (e) =&gt; {\n    const { zoom, center, bbox, bboxString } = e.detail;\n    console.log(`Map zoom at level ${zoom}`);\n    console.log(`Centered at (${center.lat}, ${center.lng})`);\n    console.log(`Bounded by (${bbox.min.lat}, ${bbox.min.lng}) and (${bbox.max.lat}, ${bbox.max.lng})`);\n    console.log(`Bounding box string: ${bboxString}`);\n  });\n</code></pre> <code>map:movestart</code> <p>Triggered when the user starts to move the map.    Event detail attributes  zoom:  the current zoom level, in the form: number  center: the geographic coordinates of the center of the map, in the form { lat: number, lng: number }  bbox: the bounding box of the map, in the form { min: { lat: number, lng: number }, max: { lat: number, lng: number } }  bboxString: the string representation of the bounding box in the format \"minLng,minLat,maxLng,maxLat\"</p> Example<pre><code>  window.addEventListener('map:movestart', (e) =&gt; {\n    const { zoom, center, bbox, bboxString } = e.detail;\n    console.log(`Map zoom at level ${zoom}`);\n    console.log(`Centered at (${center.lat}, ${center.lng})`);\n    console.log(`Bounded by (${bbox.min.lat}, ${bbox.min.lng}) and (${bbox.max.lat}, ${bbox.max.lng})`);\n    console.log(`Bounding box string: ${bboxString}`);\n  });\n</code></pre> <code>map:moveend</code> <p>Triggered when the user ends moving the map.    Event detail attributes  zoom:  the current zoom level, in the form: number  center: the geographic coordinates of the center of the map, in the form { lat: number, lng: number }  bbox: the bounding box of the map, in the form { min: { lat: number, lng: number }, max: { lat: number, lng: number } }  bboxString: the string representation of the bounding box in the format \"minLng,minLat,maxLng,maxLat\"</p> Example<pre><code>  window.addEventListener(\"map:moveend\", (e) =&gt; {\n    const { zoom, center, bbox, bboxString } = e.detail;\n    console.log(`Map zoom at level ${zoom}`);\n    console.log(`Centered at (${center.lat}, ${center.lng})`);\n    console.log(`Bounded by (${bbox.min.lat}, ${bbox.min.lng}) and (${bbox.max.lat}, ${bbox.max.lng})`);\n    console.log(`Bounding box string: ${bboxString}`);\n  });\n</code></pre>"},{"location":"usage/#geometry-events","title":"Geometry Events","text":"<code>geometry:click</code> <p>Triggered when the user clicks on a geometry.    Event detail attributes  clickedPoint: the geographic coordinates of the clicked point, in the form { lat: number, lng: number } geometry: the geographic coordinates of the geometry, in the form { lat: number, lng: number } or list of { lat: number, lng: number }   bbox: the bounding box of the map, in the form: { min: { lat: number, lng: number }, max: { lat: number, lng: number } }  rowId: the unique identifier of the geometry, which is stored in the 'data-id' attribute, in the form of string</p> Example<pre><code>  window.addEventListener('geometry:click', (e) =&gt; {\n    const { clickedPoint, geometry, rowId } = e.detail;\n    console.log(`Clicked on row with ID ${rowId}`);\n    console.log(`Geometry: ${JSON.stringify(geometry)}`);\n    console.log(`Clicked at (${clickedPoint.lat}, ${clickedPoint.lng})`);\n  });\n</code></pre>"}]}