{"version":3,"file":"hyperleaflet.js","sources":["../../../src/Map/tiles.js","../../../src/Map/util.js","../../../src/Geometry/geometry-debugger.js","../../../src/Geometry/utils.js","../../../src/Geometry/events.js","../../../src/Geometry/leaflet-geometry.js","../../../src/hyperleaflet.js","../../../src/Geometry/hyperleaflet-geometry-handler.js","../../../src/Geometry/index.js","../../../src/Map/index.js","../../../src/Map/map.js","../../../src/Map/events.js"],"sourcesContent":["import { tileLayer } from 'leaflet';\n\nconst tileLayers = {\n  OpenStreetMap: tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n  }),\n  EsriWorldImagery: tileLayer(\n    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n    {\n      attribution:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    },\n  ),\n};\n\nexport function addTileLayer(newTileLayer) {\n  if (tileLayers[newTileLayer.name]) {\n    console.warn(`Tile layer ${newTileLayer.name} already exists. Skipping.`);\n    return;\n  }\n  tileLayers[newTileLayer.name] = newTileLayer.tile;\n}\n\nexport default tileLayers;\n","import { control, TileLayer } from 'leaflet';\nimport tileLayers, { addTileLayer } from './tiles';\n\nexport function createCustomTileLayer(url, { minZoom, maxZoom, tms } = {}) {\n  return new TileLayer(url, { minZoom: minZoom || 0, maxZoom: maxZoom || 18, tms: !!tms });\n}\n\nexport function createTileController(tiles) {\n  return tiles.length ? control.layers(Object.fromEntries(tiles.map(({ name, tile }) => [name, tile]))) : null;\n}\n\nexport function parseTileLayerElement(tileLayerElement) {\n  const { tile, tileUrl, tms, minZoom, maxZoom } = tileLayerElement.dataset;\n  if (tileUrl) {\n    const newTile = createCustomTileLayer(tileUrl, { minZoom, maxZoom, tms: tms === 'true' });\n    addTileLayer({ name: tile, tile: newTile });\n  }\n  const currentTile = tileLayers[tile];\n  if (!currentTile) {\n    console.warn(`${tile} is not in: \\n${Object.keys(tileLayers).join('\\n')}`);\n    return null;\n  }\n  currentTile.options.minZoom = minZoom;\n  currentTile.options.maxZoom = maxZoom;\n  return { tile: currentTile, name: tile };\n}\n","const debugMode = document.createElement('script');\ndebugMode.type = 'application/json';\ndebugMode.setAttribute('data-testid', 'debug');\ndebugMode.innerText = '{}';\ndocument.body.appendChild(debugMode);\n\nconst debugObject = JSON.parse(debugMode.text);\nexport function addToDebug(node) {\n  const { id, geometry, geometryType } = node.dataset;\n  node.removeAttribute('data-geometry');\n  debugObject[id] = { type: geometryType, coordinates: JSON.parse(geometry) };\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n\nexport function deleteFromDebug(node) {\n  const { id } = node.dataset;\n  delete debugObject[id];\n  debugMode.text = JSON.stringify(debugObject, null, 2);\n}\n","export default function utils(node) {\n  node.removeAttribute('data-geometry');\n}\n","export default function setGeometryEvents(leafletObject, id) {\n  leafletObject.on('click', () => {\n    const event = new CustomEvent('pointclick', { detail: { point: leafletObject.getLatLng(), rowId: id } });\n    window.dispatchEvent(event);\n  });\n}\n","import { marker, polyline, polygon, GeoJSON } from 'leaflet';\nimport setGeometryEvents from './events';\n\nconst createPointGeometry = (parsedGeometry, options) => {\n  const geometry = marker(parsedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createLineGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 0);\n  const geometry = polyline(flippedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createPolygonGeometry = (parsedGeometry, options) => {\n  const flippedGeometry = GeoJSON.coordsToLatLngs(parsedGeometry, 1);\n  const geometry = polygon(flippedGeometry);\n  if (options.popup) {\n    geometry.bindPopup(options.popup);\n  }\n  if (options.tooltip) {\n    geometry.bindTooltip(options.tooltip);\n  }\n  setGeometryEvents(geometry, options.id);\n  return geometry;\n};\n\nconst createGeometry = (geometryType) => (parsedGeometry, options) => {\n  switch (geometryType) {\n    case 'Point':\n      return createPointGeometry(parsedGeometry, options);\n    case 'LineString':\n      return createLineGeometry(parsedGeometry, options);\n    case 'Polygon':\n      return createPolygonGeometry(parsedGeometry, options);\n    default:\n      // eslint-disable-next-line no-console\n      console.warn(`${geometryType} is not supported`);\n      return null;\n  }\n};\n\nexport default function createLeafletObject(row) {\n  const { geometry, popup, tooltip, geometryType, id } = row;\n  const parsedGeometry = JSON.parse(geometry);\n\n  const createGeometryFn = createGeometry(geometryType);\n  return createGeometryFn(parsedGeometry, { popup, tooltip, id });\n}\n","import { geoJSON as leafletGeoJSON } from 'leaflet';\n\nimport createMap from './Map';\nimport hyperleafletDataToMap from './Geometry';\n\nconst hyperleaflet = (function hyperleaflet() {\n  const map = createMap();\n  hyperleafletDataToMap(map);\n\n  // TODO - move this to a separate file\n  /**\n   Adds a GeoJSON object to the map.\n   @param {Object} geoJSON - The GeoJSON object to add to the map.\n   @returns {void}\n   */\n  const addGeoJsonToMap = (geoJSON) => {\n    leafletGeoJSON(geoJSON).addTo(map);\n  };\n\n  return { map, addGeoJsonToMap };\n})();\n\nexport default hyperleaflet;\n","import createLeafletObject from './leaflet-geometry';\n\nconst leafletObjectMap = new Map();\n\nfunction addNodeToHyperleaflet(node) {\n  const { dataset } = node;\n  const rowId = dataset.id;\n\n  if (rowId in leafletObjectMap) {\n    // eslint-disable-next-line no-console\n    console.error(`%c${rowId}`, 'color:red', 'already exists', node);\n    return [];\n  }\n\n  const leafletObject = createLeafletObject({ ...dataset });\n  leafletObjectMap.set(rowId, leafletObject);\n\n  return [leafletObject];\n}\n\nfunction deleteNodeFromHyperleaflet(node) {\n  const rowId = node.dataset.id;\n  const leafletObject = leafletObjectMap.get(rowId);\n  leafletObjectMap.delete(rowId);\n  return [leafletObject];\n}\n\nexport default function hyperleafletGeometryHandler(map, { addCallback = () => {}, removeCallback = () => {} }) {\n  const addNoteListToHyperleaflet = (nodes) => {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const [leafletObject] = addNodeToHyperleaflet(node);\n        leafletObject.addTo(map);\n        addCallback(node);\n      }\n    });\n  };\n\n  function removeNodeListToHyperleaflet(nodes) {\n    nodes.forEach((node) => {\n      if (node.nodeType === 1 && node.matches('[data-id]')) {\n        const [leafletObject] = deleteNodeFromHyperleaflet(node);\n        leafletObject.remove();\n        removeCallback(node);\n      }\n    });\n  }\n\n  return { addNoteListToHyperleaflet, removeNodeListToHyperleaflet };\n}\n","import { addToDebug, deleteFromDebug } from './geometry-debugger';\nimport removeGeometryAttributes from './utils';\nimport hyperleafletGeometryHandler from './hyperleaflet-geometry-handler';\n\n/**\n * Adds the data from the hyperleaflet container to the map.\n @param {L.Map} map\n @param map\n */\n\nfunction hyperleafletDataToMap(map) {\n  const hyperleafletDataSource = document.querySelector('[data-hyperleaflet-source]');\n\n  if (!hyperleafletDataSource) return;\n\n  const geometryDisplayStrategy = hyperleafletDataSource.dataset.geometryDisplay || 'object';\n\n  let callbackFunctions = {};\n  if (geometryDisplayStrategy === 'object') {\n    callbackFunctions = {\n      addCallback: addToDebug,\n      removeCallback: deleteFromDebug,\n    };\n  } else if (geometryDisplayStrategy === 'remove') {\n    callbackFunctions = {\n      addCallback: removeGeometryAttributes,\n      removeCallback: () => {},\n    };\n  }\n\n  const { addNoteListToHyperleaflet, removeNodeListToHyperleaflet } = hyperleafletGeometryHandler(\n    map,\n    callbackFunctions,\n  );\n\n  map.whenReady(() => {\n    const nodes = hyperleafletDataSource.querySelectorAll('[data-id]');\n    addNoteListToHyperleaflet(nodes);\n  });\n\n  function callback(mutations) {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        addNoteListToHyperleaflet(mutation.addedNodes);\n        removeNodeListToHyperleaflet(mutation.removedNodes);\n      }\n    });\n  }\n\n  const observer = new MutationObserver(callback);\n\n  observer.observe(hyperleafletDataSource, {\n    childList: true, // observe direct children\n    subtree: true, // and lower descendants too\n    attributeFilter: ['data-id'],\n  });\n}\n\nexport default hyperleafletDataToMap;\n","import createHyperleafletMap, { createHyperleafletTiles } from './map';\n\n/**\n *Creates a map\n * @returns {L.Map}\n */\nfunction createMap() {\n  const mapContainer = document.querySelector('#map');\n  const map = createHyperleafletMap(mapContainer);\n\n  const tileLayerElementList = mapContainer.querySelectorAll('[data-tile]');\n  const { defaultHyperleafletTile, tileController } = createHyperleafletTiles(tileLayerElementList);\n\n  if (tileController) {\n    tileController.addTo(map);\n  }\n  defaultHyperleafletTile.addTo(map);\n  return map;\n}\n\nexport default createMap;\n","import { map } from 'leaflet';\nimport TILE_LAYERS from './tiles';\nimport setMapEvents from './events';\nimport { createTileController, parseTileLayerElement } from './util';\n\nexport function getDefaultHyperleafletTile(tileLayerElementList) {\n  const defaultTileLayerElement = tileLayerElementList.find((t) => 'defaultTile' in t.dataset);\n  if (defaultTileLayerElement && defaultTileLayerElement.dataset.tile in TILE_LAYERS) {\n    return TILE_LAYERS[defaultTileLayerElement.dataset.tile];\n  }\n  if (tileLayerElementList.length && tileLayerElementList[0].dataset.tile in TILE_LAYERS) {\n    return TILE_LAYERS[tileLayerElementList[0].dataset.tile];\n  }\n  return TILE_LAYERS.OpenStreetMap;\n}\n\nexport function createHyperleafletTiles(tileLayerElementNodeList) {\n  const tileLayerElementList = Array.from(tileLayerElementNodeList);\n  const hyperleafletTiles = tileLayerElementList.map(parseTileLayerElement).filter(Boolean);\n  const defaultHyperleafletTile = getDefaultHyperleafletTile(tileLayerElementList);\n  const tileController = createTileController(hyperleafletTiles);\n  return {\n    defaultHyperleafletTile,\n    tileController,\n  };\n}\n\nexport default function createHyperleafletMap(mapElement) {\n  const { center, zoom, minZoom, maxZoom } = mapElement.dataset;\n\n  const mapView = {\n    center: center?.split(',') ?? [0, 0],\n    zoom: zoom || 1,\n  };\n  const leafletMap = map(mapElement, {\n    center: mapView.center,\n    zoom: mapView.zoom,\n    minZoom: minZoom || 0,\n    maxZoom: maxZoom || 18,\n  });\n  return setMapEvents(leafletMap);\n}\n","export default function setMapEvents(map) {\n  map.on('click', (e) => {\n    const event = new CustomEvent('mapclick', { detail: { point: e.latlng } });\n    window.dispatchEvent(event);\n  });\n\n  map.on('zoomend', () => {\n    const event = new CustomEvent('mapzoom', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  map.on('move', () => {\n    const event = new CustomEvent('mapmove', {\n      detail: { zoom: map.getZoom(), center: map.getCenter(), bbox: map.getBounds() },\n    });\n    window.dispatchEvent(event);\n  });\n\n  return map;\n}\n"],"names":["tileLayers","OpenStreetMap","tileLayer","attribution","EsriWorldImagery","parseTileLayerElement","tileLayerElement","newTileLayer","_temp","_ref","dataset","tile","tileUrl","_tileLayerElement$dat","minZoom","maxZoom","newTile","TileLayer","tms","name","console","warn","currentTile","options","Object","keys","join","debugMode","document","createElement","type","setAttribute","innerText","body","appendChild","debugObject","JSON","parse","text","node","id","geometry","geometryType","_node$dataset","removeAttribute","coordinates","stringify","deleteFromDebug","utils","leafletObject","on","CustomEvent","detail","point","getLatLng","rowId","window","dispatchEvent","event","map","leafletObjectMap","Map","hyperleafletDataSource","querySelector","geometryDisplayStrategy","geometryDisplay","callbackFunctions","addCallback","addToDebug","removeCallback","removeGeometryAttributes","hyperleafletGeometryHandler","_ref$addCallback","_ref$removeCallback","addNoteListToHyperleaflet","nodes","forEach","nodeType","matches","error","row","popup","tooltip","parsedGeometry","_extends","marker","bindPopup","bindTooltip","setGeometryEvents","createPointGeometry","flippedGeometry","GeoJSON","coordsToLatLngs","polyline","createLineGeometry","polygon","createPolygonGeometry","createGeometry","createGeometryFn","set","addNodeToHyperleaflet","addTo","removeNodeListToHyperleaflet","deleteNodeFromHyperleaflet","get","_deleteNodeFromHyperl","remove","whenReady","querySelectorAll","MutationObserver","mutations","mutation","addedNodes","removedNodes","observe","childList","subtree","attributeFilter","hyperleafletDataToMap","mapContainer","mapElement","_center$split","_mapElement$dataset","center","zoom","mapView","split","leafletMap","e","latlng","getZoom","getCenter","bbox","getBounds","createHyperleafletMap","_createHyperleafletTi","tileLayerElementNodeList","tiles","tileLayerElementList","Array","from","hyperleafletTiles","filter","Boolean","defaultHyperleafletTile","getDefaultHyperleafletTile","defaultTileLayerElement","find","t","TILE_LAYERS","length","tileController","control","layers","fromEntries","_ref2","createHyperleafletTiles","createMap","addGeoJsonToMap","geoJSON","leafletGeoJSON"],"mappings":"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"}